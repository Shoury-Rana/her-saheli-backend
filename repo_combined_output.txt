

===== build.sh =====
#!/usr/bin/env bash
# exit on error
set -o errexit

pip install -r requirements.txt

python manage.py collectstatic --no-input
python manage.py migrate

# Create superuser from environment variables
python manage.py createsuperuser_from_env || true

===== manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'her_saheli_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== requirements.txt =====


===== chatbot/admin.py =====
from django.contrib import admin

# Register your models here.


===== chatbot/apps.py =====
from django.apps import AppConfig


class ChatbotConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'chatbot'


===== chatbot/models.py =====
from django.db import models

# Create your models here.


===== chatbot/tests.py =====
from django.test import TestCase

# Create your tests here.


===== chatbot/urls.py =====
from django.urls import path
from .views import ChatbotQueryView

urlpatterns = [
    path('query/', ChatbotQueryView.as_view(), name='chatbot-query'),
]

===== chatbot/views.py =====
from rest_framework import views, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated

class ChatbotQueryView(views.APIView):
    permission_classes = (IsAuthenticated,)

    def post(self, request, *args, **kwargs):
        # The user's message is in request.data['message'], but we ignore it for the MVP.
        response_data = {
            "response": "Thank you for your question! Our AI companion is still in training and will be available soon. Please always consult a doctor for medical advice."
        }
        return Response(response_data, status=status.HTTP_200_OK)

===== chatbot/__init__.py =====


===== chatbot/migrations/__init__.py =====


===== content/admin.py =====
from django.contrib import admin
from .models import StaticContent

@admin.register(StaticContent)
class StaticContentAdmin(admin.ModelAdmin):
    list_display = ('title', 'relevant_mode', 'content_type', 'week_of_pregnancy')
    list_filter = ('relevant_mode', 'content_type')
    search_fields = ('title', 'body')
    ordering = ('relevant_mode', 'content_type', 'title')
    list_per_page = 25

===== content/apps.py =====
from django.apps import AppConfig


class ContentConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'content'


===== content/models.py =====
from django.db import models
from users.models import UserProfile

class StaticContent(models.Model):
    class ContentType(models.TextChoices):
        TIP = 'TIP', 'Tip'
        FAQ = 'FAQ', 'Frequently Asked Question'
        GUIDE = 'GUIDE', 'Guide'
    
    title = models.CharField(max_length=200)
    body = models.TextField()
    content_type = models.CharField(max_length=10, choices=ContentType.choices)
    relevant_mode = models.CharField(max_length=20, choices=UserProfile.HealthMode.choices)
    week_of_pregnancy = models.PositiveSmallIntegerField(null=True, blank=True, help_text="Only for pregnancy guides")

    def __str__(self):
        return f"[{self.relevant_mode} {self.content_type}] {self.title}"

===== content/serializers.py =====
from rest_framework import serializers
from .models import StaticContent

class StaticContentSerializer(serializers.ModelSerializer):
    class Meta:
        model = StaticContent
        fields = ('id', 'title', 'body', 'content_type', 'relevant_mode', 'week_of_pregnancy')

===== content/tests.py =====
from django.test import TestCase

# Create your tests here.


===== content/urls.py =====
from django.urls import path
from .views import StaticContentView

urlpatterns = [
    path('', StaticContentView.as_view(), name='static-content-list'),
]

===== content/views.py =====
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from .models import StaticContent
from .serializers import StaticContentSerializer

class StaticContentView(generics.ListAPIView):
    """
    List static content like tips, guides, and FAQs.
    Filterable by query parameters:
    - `mode`: e.g., 'MENSTRUAL', 'TTC', 'PREGNANCY'
    - `type`: e.g., 'TIP', 'FAQ', 'GUIDE'
    - `week`: e.g., 8, 20 (for pregnancy guides)
    """
    serializer_class = StaticContentSerializer
    permission_classes = (IsAuthenticated,)

    def get_queryset(self):
        queryset = StaticContent.objects.all()
        
        # Filter by relevant health mode
        mode = self.request.query_params.get('mode')
        if mode:
            queryset = queryset.filter(relevant_mode__iexact=mode)
            
        # Filter by content type
        content_type = self.request.query_params.get('type')
        if content_type:
            queryset = queryset.filter(content_type__iexact=content_type)

        # Filter by week of pregnancy (only for pregnancy guides)
        week = self.request.query_params.get('week')
        if week and week.isdigit():
            queryset = queryset.filter(week_of_pregnancy=int(week))
            
        return queryset

===== content/__init__.py =====


===== content/migrations/0001_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='StaticContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('content_type', models.CharField(choices=[('TIP', 'Tip'), ('FAQ', 'Frequently Asked Question'), ('GUIDE', 'Guide')], max_length=10)),
                ('relevant_mode', models.CharField(choices=[('menstrual', 'Menstrual'), ('ttc', 'Trying to Conceive'), ('pregnancy', 'Pregnancy'), ('postpartum', 'Postpartum'), ('menopause', 'Menopause')], max_length=20)),
                ('week_of_pregnancy', models.PositiveSmallIntegerField(blank=True, help_text='Only for pregnancy guides', null=True)),
            ],
        ),
    ]


===== content/migrations/__init__.py =====


===== cycles/admin.py =====
from django.contrib import admin
from .models import Cycle, Symptom, DailyLog

@admin.register(Symptom)
class SymptomAdmin(admin.ModelAdmin):
    search_fields = ('name',)

@admin.register(Cycle)
class CycleAdmin(admin.ModelAdmin):
    list_display = ('user', 'start_date', 'end_date')
    search_fields = ('user__username',)
    list_filter = ('start_date',)

@admin.register(DailyLog)
class DailyLogAdmin(admin.ModelAdmin):
    list_display = ('user', 'date', 'mood', 'pain_level')
    search_fields = ('user__username',)
    list_filter = ('date', 'mood')
    filter_horizontal = ('symptoms',)

===== cycles/apps.py =====
from django.apps import AppConfig


class CyclesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cycles'


===== cycles/models.py =====
from django.db import models
from users.models import User

class Cycle(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='cycles')
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)

    class Meta:
        ordering = ['-start_date']

    def __str__(self):
        return f"Cycle for {self.user.username} starting {self.start_date}"

class Symptom(models.Model):
    name = models.CharField(max_length=100, unique=True)
    
    def __str__(self):
        return self.name

class DailyLog(models.Model):
    class Mood(models.TextChoices):
        HAPPY = 'HAPPY', 'Happy'
        SAD = 'SAD', 'Sad'
        ANXIOUS = 'ANXIOUS', 'Anxious'
        IRRITABLE = 'IRRITABLE', 'Irritable'
        ENERGETIC = 'ENERGETIC', 'Energetic'
        FATIGUED = 'FATIGUED', 'Fatigued'

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='daily_logs')
    date = models.DateField()
    mood = models.CharField(max_length=20, choices=Mood.choices, null=True, blank=True)
    pain_level = models.PositiveSmallIntegerField(null=True, blank=True) # e.g., 0-5
    symptoms = models.ManyToManyField(Symptom, blank=True)

    class Meta:
        ordering = ['-date']
        unique_together = ('user', 'date')

    def __str__(self):
        return f"Log for {self.user.username} on {self.date}"

===== cycles/serializers.py =====
from rest_framework import serializers
from .models import Cycle, DailyLog, Symptom

class CycleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Cycle
        fields = ('id', 'start_date', 'end_date')
        read_only_fields = ('id',)

class DailyLogSerializer(serializers.ModelSerializer):
    symptoms = serializers.PrimaryKeyRelatedField(
        queryset=Symptom.objects.all(),
        many=True,
        required=False
    )
    
    class Meta:
        model = DailyLog
        fields = ('date', 'mood', 'pain_level', 'symptoms')

===== cycles/tests.py =====
from django.test import TestCase

# Create your tests here.


===== cycles/urls.py =====
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import CycleViewSet, DailyLogView, MenstrualPredictionView, TTCPredictionView

router = DefaultRouter()
router.register(r'menstrual/periods', CycleViewSet, basename='cycle')

urlpatterns = [
    path('', include(router.urls)),
    path('menstrual/logs/<str:date_str>/', DailyLogView.as_view(), name='daily-log'),
    path('menstrual/prediction/', MenstrualPredictionView.as_view(), name='menstrual-prediction'),
    path('ttc/prediction/', TTCPredictionView.as_view(), name='ttc-prediction'),
]

===== cycles/views.py =====
from datetime import timedelta
from django.utils import timezone
from rest_framework import viewsets, views, status
from rest_framework.response import Response
from .models import Cycle, DailyLog
from .serializers import CycleSerializer, DailyLogSerializer

class CycleViewSet(viewsets.ModelViewSet):
    serializer_class = CycleSerializer

    def get_queryset(self):
        return Cycle.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class DailyLogView(views.APIView):
    def get(self, request, date_str):
        try:
            log_date = timezone.datetime.strptime(date_str, '%Y-%m-%d').date()
            log = DailyLog.objects.get(user=request.user, date=log_date)
            serializer = DailyLogSerializer(log)
            return Response(serializer.data)
        except DailyLog.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        except ValueError:
            return Response({"error": "Invalid date format. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)

    def post(self, request, date_str):
        try:
            log_date = timezone.datetime.strptime(date_str, '%Y-%m-%d').date()
            log, created = DailyLog.objects.get_or_create(user=request.user, date=log_date)
            serializer = DailyLogSerializer(log, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED if created else status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except ValueError:
            return Response({"error": "Invalid date format. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)


class MenstrualPredictionView(views.APIView):
    def get(self, request):
        cycles = Cycle.objects.filter(user=request.user).order_by('-start_date')[:6]
        
        if cycles.count() < 2:
            return Response({"message": "Not enough cycle data to make a prediction."}, status=status.HTTP_404_NOT_FOUND)

        cycle_lengths = []
        for i in range(len(cycles) - 1):
            length = (cycles[i].start_date - cycles[i+1].start_date).days
            if 15 < length < 45: # Filter out abnormal cycle lengths for better prediction
                cycle_lengths.append(length)

        if not cycle_lengths:
            avg_cycle_length = 28 # Default if no valid cycles
        else:
            avg_cycle_length = sum(cycle_lengths) // len(cycle_lengths)

        last_cycle_start = cycles[0].start_date
        predicted_next_start = last_cycle_start + timedelta(days=avg_cycle_length)
        
        return Response({
            "predicted_next_cycle_start": predicted_next_start,
            "average_cycle_length": avg_cycle_length
        })

class TTCPredictionView(views.APIView):
    def get(self, request):
        # This view reuses the logic from MenstrualPredictionView
        prediction_view = MenstrualPredictionView()
        prediction_response = prediction_view.get(request)

        if prediction_response.status_code != 200:
            return prediction_response # Pass on the "not enough data" message

        predicted_start_str = prediction_response.data.get("predicted_next_cycle_start")
        predicted_start = timezone.datetime.strptime(predicted_start_str, '%Y-%m-%d').date()
        
        # Ovulation is typically 14 days before the next period
        estimated_ovulation = predicted_start - timedelta(days=14)
        
        # Fertile window is about 5 days before ovulation and the day of ovulation
        fertile_window_start = estimated_ovulation - timedelta(days=5)
        fertile_window_end = estimated_ovulation

        return Response({
            "fertile_window_start": fertile_window_start,
            "fertile_window_end": fertile_window_end,
            "estimated_ovulation_date": estimated_ovulation
        })

===== cycles/__init__.py =====


===== cycles/migrations/0001_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('mood', models.CharField(blank=True, choices=[('HAPPY', 'Happy'), ('SAD', 'Sad'), ('ANXIOUS', 'Anxious'), ('IRRITABLE', 'Irritable'), ('ENERGETIC', 'Energetic'), ('FATIGUED', 'Fatigued')], max_length=20, null=True)),
                ('pain_level', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
    ]


===== cycles/migrations/0002_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cycles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='cycle',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cycles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dailylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dailylog',
            name='symptoms',
            field=models.ManyToManyField(blank=True, to='cycles.symptom'),
        ),
        migrations.AlterUniqueTogether(
            name='dailylog',
            unique_together={('user', 'date')},
        ),
    ]


===== cycles/migrations/__init__.py =====


===== her_saheli_backend/asgi.py =====
"""
ASGI config for her_saheli_backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'her_saheli_backend.settings')

application = get_asgi_application()


===== her_saheli_backend/settings.py =====
import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, ".env"))

SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS_str = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_str.split(',') if host.strip()]

CSRF_TRUSTED_ORIGINS_str = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_str.split(',') if origin.strip()]


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_spectacular',

    # Local apps
    'users',
    'cycles',
    'pregnancy',
    'postpartum',
    'content',
    'chatbot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'her_saheli_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'her_saheli_backend.wsgi.application'

DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=not DEBUG
    )
}

AUTH_USER_MODEL = 'users.User'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
}
CORS_ALLOW_ALL_ORIGINS = True

SPECTACULAR_SETTINGS = {
    'TITLE': 'Her-Saheli API',
    'DESCRIPTION': 'API documentation for the Her-Saheli project.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

===== her_saheli_backend/urls.py =====
from django.contrib import admin
from django.urls import path, include
from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView
from users.views import UserProfileView # Import the view directly

urlpatterns = [
    path('admin/', admin.site.urls),

    # Authentication and User Profile URLs to match frontend
    path('api/auth/', include('users.urls')),
    path('api/user/profile', UserProfileView.as_view(), name='user-profile-detail'), # Note: no trailing slash from frontend

    # Other App URLs
    path('api/cycles/', include('cycles.urls')),
    path('api/pregnancy/', include('pregnancy.urls')),
    path('api/postpartum/', include('postpartum.urls')),
    path('api/content/', include('content.urls')),
    path('api/chatbot/', include('chatbot.urls')),
    
    # API Documentation URLs
    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
    path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
    path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),
]

===== her_saheli_backend/wsgi.py =====
"""
WSGI config for her_saheli_backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'her_saheli_backend.settings')

application = get_wsgi_application()


===== her_saheli_backend/__init__.py =====


===== postpartum/admin.py =====
from django.contrib import admin
from .models import PostpartumMoodLog

@admin.register(PostpartumMoodLog)
class PostpartumMoodLogAdmin(admin.ModelAdmin):
    list_display = ('user', 'date', 'mood')
    search_fields = ('user__username',)
    list_filter = ('mood', 'date')

===== postpartum/apps.py =====
from django.apps import AppConfig


class PostpartumConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'postpartum'


===== postpartum/models.py =====
from django.db import models
from users.models import User

class PostpartumMoodLog(models.Model):
    class Mood(models.TextChoices):
        HAPPY = 'HAPPY', 'Happy'
        ANXIOUS = 'ANXIOUS', 'Anxious'
        OVERWHELMED = 'OVERWHELMED', 'Overwhelmed'
        TIRED = 'TIRED', 'Tired'
        JOYFUL = 'JOYFUL', 'Joyful'
        
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='postpartum_logs')
    date = models.DateField()
    mood = models.CharField(max_length=20, choices=Mood.choices)

    class Meta:
        ordering = ['-date']
        unique_together = ('user', 'date')

    def __str__(self):
        return f"Postpartum log for {self.user.username} on {self.date}"

===== postpartum/serializers.py =====
from rest_framework import serializers
from .models import PostpartumMoodLog

class PostpartumMoodLogSerializer(serializers.ModelSerializer):
    class Meta:
        model = PostpartumMoodLog
        fields = ('date', 'mood')

===== postpartum/tests.py =====
from django.test import TestCase

# Create your tests here.


===== postpartum/urls.py =====
from django.urls import path
from .views import PostpartumMoodLogView

urlpatterns = [
    path('logs/<str:date_str>/', PostpartumMoodLogView.as_view(), name='postpartum-log'),
]

===== postpartum/views.py =====
from django.utils import timezone
from rest_framework import views, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import PostpartumMoodLog
from .serializers import PostpartumMoodLogSerializer

class PostpartumMoodLogView(views.APIView):
    """
    GET, POST, or UPDATE a postpartum mood log for a specific date.
    """
    permission_classes = (IsAuthenticated,)

    def get(self, request, date_str):
        try:
            log_date = timezone.datetime.strptime(date_str, '%Y-%m-%d').date()
            log = PostpartumMoodLog.objects.get(user=request.user, date=log_date)
            serializer = PostpartumMoodLogSerializer(log)
            return Response(serializer.data)
        except PostpartumMoodLog.DoesNotExist:
            return Response({"detail": "No log found for this date."}, status=status.HTTP_404_NOT_FOUND)
        except ValueError:
            return Response({"error": "Invalid date format. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)

    def post(self, request, date_str):
        try:
            log_date = timezone.datetime.strptime(date_str, '%Y-%m-%d').date()
            # Add the date to the request data for validation
            request.data['date'] = log_date
            
            # Use get_or_create to handle both creation and updates
            log, created = PostpartumMoodLog.objects.get_or_create(
                user=request.user, 
                date=log_date,
                defaults={'mood': request.data.get('mood')}
            )

            # If the object was not created, it means it already existed, so we update it
            if not created:
                serializer = PostpartumMoodLogSerializer(log, data=request.data)
            else:
                serializer = PostpartumMoodLogSerializer(log, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                response_status = status.HTTP_201_CREATED if created else status.HTTP_200_OK
                return Response(serializer.data, status=response_status)
            
            # If invalid, and we created a placeholder, delete it.
            if created:
                log.delete()
                
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except ValueError:
            return Response({"error": "Invalid date format. Use YYYY-MM-DD."}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

===== postpartum/__init__.py =====


===== postpartum/migrations/0001_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PostpartumMoodLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('mood', models.CharField(choices=[('HAPPY', 'Happy'), ('ANXIOUS', 'Anxious'), ('OVERWHELMED', 'Overwhelmed'), ('TIRED', 'Tired'), ('JOYFUL', 'Joyful')], max_length=20)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
    ]


===== postpartum/migrations/0002_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('postpartum', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='postpartummoodlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='postpartum_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='postpartummoodlog',
            unique_together={('user', 'date')},
        ),
    ]


===== postpartum/migrations/__init__.py =====


===== pregnancy/admin.py =====
from django.contrib import admin
from .models import PregnancyProfile

@admin.register(PregnancyProfile)
class PregnancyProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'estimated_due_date')
    search_fields = ('user__username',)

===== pregnancy/apps.py =====
from django.apps import AppConfig


class PregnancyConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pregnancy'


===== pregnancy/models.py =====
from django.db import models
from users.models import User

class PregnancyProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='pregnancy_profile')
    estimated_due_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"Pregnancy Profile for {self.user.username}"

===== pregnancy/serializers.py =====
from rest_framework import serializers
from .models import PregnancyProfile

class PregnancyProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = PregnancyProfile
        fields = ('estimated_due_date',)

===== pregnancy/tests.py =====
from django.test import TestCase

# Create your tests here.


===== pregnancy/urls.py =====
from django.urls import path
from .views import PregnancyProfileView

urlpatterns = [
    path('profile/', PregnancyProfileView.as_view(), name='pregnancy-profile'),
]

===== pregnancy/views.py =====
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from .models import PregnancyProfile
from .serializers import PregnancyProfileSerializer

class PregnancyProfileView(generics.RetrieveUpdateAPIView):
    """
    Retrieve or update the pregnancy profile for the authenticated user.
    If a profile doesn't exist, one will be created upon first access.
    """
    serializer_class = PregnancyProfileSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        # Retrieve or create a pregnancy profile for the logged-in user
        profile, created = PregnancyProfile.objects.get_or_create(user=self.request.user)
        return profile

===== pregnancy/__init__.py =====


===== pregnancy/migrations/0001_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PregnancyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estimated_due_date', models.DateField(blank=True, null=True)),
            ],
        ),
    ]


===== pregnancy/migrations/0002_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pregnancy', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='pregnancyprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pregnancy_profile', to=settings.AUTH_USER_MODEL),
        ),
    ]


===== pregnancy/migrations/__init__.py =====


===== users/admin.py =====
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User, UserProfile

class UserProfileInline(admin.StackedInline):
    model = UserProfile
    can_delete = False
    verbose_name_plural = 'Profile'

class CustomUserAdmin(UserAdmin):
    # --- Configuration for the User List View in Admin ---
    list_display = ('email', 'is_staff', 'date_joined')
    search_fields = ('email',)
    ordering = ('email',)

    # --- Configuration for the User EDIT page ---
    # This was corrected in the previous step.
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'date_joined')}),
    )
    
    # --- Configuration for the User ADD page (THE FIX) ---
    # This was missing. We must define it to override the default which expects 'username'.
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password', 'password2'), # Replaced 'username' with 'email'
        }),
    )

    inlines = (UserProfileInline,)

admin.site.register(User, CustomUserAdmin)

===== users/apps.py =====
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


===== users/managers.py =====
from django.contrib.auth.models import BaseUserManager

class CustomUserManager(BaseUserManager):
    """
    Custom user model manager where username is the unique identifier
    instead of an email address.
    """
    def create_user(self, username, password, **extra_fields):
        """
        Create and save a User with the given username and password.
        """
        if not username:
            raise ValueError('The Username must be set')
        
        user = self.model(username=username, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, password, **extra_fields):
        """
        Create and save a SuperUser with the given username and password.
        """
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')
            
        return self.create_user(username, password, **extra_fields)

===== users/models.py =====
from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.utils.translation import gettext_lazy as _

class CustomUserManager(BaseUserManager):
    """
    Custom user model manager where email is the unique identifier
    for authentication instead of usernames.
    """
    def create_user(self, email, password, **extra_fields):
        """
        Create and save a User with the given email and password.
        """
        if not email:
            raise ValueError(_('The Email must be set'))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        """
        Create and save a SuperUser with the given email and password.
        """
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError(_('Superuser must have is_staff=True.'))
        if extra_fields.get('is_superuser') is not True:
            raise ValueError(_('Superuser must have is_superuser=True.'))
            
        return self.create_user(email, password, **extra_fields)

class User(AbstractUser):
    username = None
    email = models.EmailField(_('email address'), unique=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

class UserProfile(models.Model):
    class HealthMode(models.TextChoices):
        MENSTRUAL = 'menstrual', 'Menstrual'
        TTC = 'ttc', 'Trying to Conceive'
        PREGNANCY = 'pregnancy', 'Pregnancy'
        POSTPARTUM = 'postpartum', 'Postpartum'
        MENOPAUSE = 'menopause', 'Menopause'

    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    name = models.CharField(max_length=255)
    age = models.PositiveSmallIntegerField(null=True, blank=True)
    average_cycle = models.PositiveSmallIntegerField(default=28)
    
    selected_mode = models.CharField(
        max_length=20,
        choices=HealthMode.choices,
        default=HealthMode.MENSTRUAL
    )
    # This field is derived from selected_mode, but we keep it for frontend compatibility
    menstrual_mode = models.BooleanField(default=True)
    
    def __str__(self):
        return f"Profile for {self.user.email}"
    
    def save(self, *args, **kwargs):
        # Automatically set menstrual_mode based on selected_mode
        self.menstrual_mode = (self.selected_mode == self.HealthMode.MENSTRUAL)
        super().save(*args, **kwargs)

===== users/serializers.py =====
from rest_framework import serializers
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from .models import User, UserProfile

class UserProfileSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(source='user.email', read_only=True)

    class Meta:
        model = UserProfile
        fields = (
            'id', 'email', 'name', 'age', 
            'average_cycle', 'selected_mode', 'menstrual_mode'
        )
        read_only_fields = ('email', 'menstrual_mode')

class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        return token

    def validate(self, attrs):
        data = super().validate(attrs)
        
        # Get user profile
        serializer = UserProfileSerializer(self.user.profile)
        
        # Add profile data to the response
        data['user'] = serializer.data
        
        # Rename 'access' to 'access_token' to match frontend
        data['access_token'] = data.pop('access')
        
        # Remove refresh token from response, as frontend doesn't need it on login
        data.pop('refresh', None)
        
        return data

class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'}, min_length=8)
    # --- FIX STARTS HERE ---
    # Mark fields that are not on the User model as write_only
    name = serializers.CharField(required=True, write_only=True)
    age = serializers.IntegerField(required=False, allow_null=True, write_only=True)
    average_cycle = serializers.IntegerField(required=False, default=28, write_only=True)
    # The 'mode' field is not used in the create method, but making it write_only is correct practice
    mode = serializers.CharField(required=False, default='Menstrual', write_only=True)
    # --- FIX ENDS HERE ---

    class Meta:
        model = User
        fields = ('id', 'email', 'password', 'name', 'age', 'average_cycle', 'mode')

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            password=validated_data['password']
        )
        
        # Create UserProfile with extra data
        UserProfile.objects.create(
            user=user,
            name=validated_data['name'],
            age=validated_data.get('age'),
            average_cycle=validated_data.get('average_cycle', 28),
        )
        return user

===== users/tests.py =====
from django.test import TestCase

# Create your tests here.


===== users/urls.py =====
from django.urls import path
from .views import UserRegistrationView, UserProfileView, LogoutView, MyTokenObtainPairView

urlpatterns = [
    # URLs to match frontend expectations
    path('register/', UserRegistrationView.as_view(), name='auth_register'),
    path('login/', MyTokenObtainPairView.as_view(), name='auth_login'),
    
    # Kept original names for internal consistency if needed
    path('profile/', UserProfileView.as_view(), name='user_profile'),
    path('logout/', LogoutView.as_view(), name='user_logout'),
]

===== users/views.py =====
from rest_framework import generics, status, views
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView

from .serializers import UserRegistrationSerializer, UserProfileSerializer, MyTokenObtainPairSerializer
from .models import UserProfile

class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer

class UserRegistrationView(generics.CreateAPIView):
    serializer_class = UserRegistrationSerializer
    permission_classes = (AllowAny,)

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        # Generate token for the new user
        refresh = RefreshToken.for_user(user)
        access_token = str(refresh.access_token)
        
        # Get user profile data
        profile_serializer = UserProfileSerializer(user.profile)
        
        # Construct response to match login response
        response_data = {
            'access_token': access_token,
            'user': profile_serializer.data
        }
        
        headers = self.get_success_headers(serializer.data)
        return Response(response_data, status=status.HTTP_201_CREATED, headers=headers)


class UserProfileView(generics.RetrieveUpdateAPIView):
    serializer_class = UserProfileSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        # Ensure profile exists for the user
        profile, created = UserProfile.objects.get_or_create(user=self.request.user)
        return profile

class LogoutView(views.APIView):
    permission_classes = (IsAuthenticated,)

    def post(self, request):
        try:
            refresh_token = request.data["refresh"]
            token = RefreshToken(refresh_token)
            token.blacklist()
            return Response(status=status.HTTP_205_RESET_CONTENT)
        except Exception as e:
            return Response(status=status.HTTP_400_BAD_REQUEST)

===== users/__init__.py =====


===== users/management/commands/createsuperuser_from_env.py =====
import os
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

User = get_user_model()

class Command(BaseCommand):
    help = 'Creates a superuser from environment variables (ADMIN_USERNAME, ADMIN_PASSWORD)'

    def handle(self, *args, **options):
        username = os.environ.get('ADMIN_USERNAME')
        password = os.environ.get('ADMIN_PASSWORD')

        if not username or not password:
            self.stdout.write(self.style.ERROR(
                'ADMIN_USERNAME and ADMIN_PASSWORD environment variables must be set.'
            ))
            return

        if User.objects.filter(username=username).exists():
            self.stdout.write(self.style.WARNING(
                f'Superuser "{username}" already exists. Skipping creation.'
            ))
        else:
            User.objects.create_superuser(username=username, password=password)
            self.stdout.write(self.style.SUCCESS(
                f'Successfully created superuser "{username}"'
            ))

===== users/migrations/0001_initial.py =====
# Generated by Django 5.2.7 on 2025-10-15 08:50

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('average_cycle', models.PositiveSmallIntegerField(default=28)),
                ('selected_mode', models.CharField(choices=[('menstrual', 'Menstrual'), ('ttc', 'Trying to Conceive'), ('pregnancy', 'Pregnancy'), ('postpartum', 'Postpartum'), ('menopause', 'Menopause')], default='menstrual', max_length=20)),
                ('menstrual_mode', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


===== users/migrations/__init__.py =====
